apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: org-standard.aws.gigapress.catex.se
  labels:
    crossplane.io/xrd: xorgs.gigapress.catex.se
    provider: aws
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: gigapress.catex.se/v1alpha1
    kind: XOrg

  patchSets:
    - name: common
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.name
          toFieldPath: metadata.labels[vpc]
        - fromFieldPath: spec.name
          toFieldPath: metadata.labels[ref.crossplane.io/org-name]

  # -----------------
  # RM includes
  # -----------------
  # - VPC
  # - EKS
  # - EKS OIDC
  # - HelmProvider: ALB Ingress Controller

  resources:

    #-----------------
    # VPC
    #-----------------
    # - 1 vpc
    # - External cluster's manager VPC
    # - VPC Peering between Manager VPC - This VPC
    # - 3 public subnet
    # - 3 private subnet
    # - 1 security group
    # - 1 routetable for public subnet
    # - 2 routetable for private subnet
    # - 1 internet gateway
    # - 1 nat gateway
    # - 1 elastic ip
    #----------------
    - name: vpc
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            enableDnsSupport: true
            enableDnsHostNames: true
            tags:
              - key: Name

      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.cidrBlock
          transforms:
            - type: string
              string:
                fmt: "%s.0.0/16"
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "gigapress-%s"
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.ownerId
          toFieldPath: status.s3.ownerId
          policy:
            fromFieldPath: Optional

    # VPC :: VPC Peering connection
    - name: vpc-peering
      base:
        apiVersion: ec2.aws.crossplane.io/v1alpha1
        kind: VPCPeeringConnection
        spec:
          forProvider:
            vpcIDSelector:
              matchControllerRef: true
            peerVPCIDSelector:
              matchLabels:
                ref.crossplane.io/vpc-manager-cluster: "true"
            acceptRequest: true
      patches:
        - type: PatchSet
          patchSetName: common
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.vpcPeeringConnectionID
          toFieldPath: status.vpc.vpcPeeringID


    # VPC :: Internet Gateway
    - name: igw
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: InternetGateway
        metadata:
          labels:
            type: igw
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
          - type: string
            string:
              fmt: "igw-%s"

    # VPC :: Subnet
    - name: subnet-public-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: public
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.name
              - fromFieldPath: spec.vpc.subnet-public-1.name
            strategy: string
            string:
              fmt: "%s-%s"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.cidrBlock
          transforms:
            - type: string
              string:
                fmt: "%s.1.0/24"
        - fromFieldPath: spec.vpc.subnet-public-1.az
          toFieldPath: spec.forProvider.availabilityZone
        - fromFieldPath: spec.vpc.subnet-public-1.az
          toFieldPath: metadata.labels.zone

    # VPC :: Subnet
    - name: subnet-public-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: public
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.name
              - fromFieldPath: spec.vpc.subnet-public-2.name
            strategy: string
            string:
              fmt: "%s-%s"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.cidrBlock
          transforms:
            - type: string
              string:
                fmt: "%s.2.0/24"
        - fromFieldPath: spec.vpc.subnet-public-2.az
          toFieldPath: spec.forProvider.availabilityZone
        - fromFieldPath: spec.vpc.subnet-public-2.az
          toFieldPath: metadata.labels.zone

    # VPC :: Subnet
    - name: subnet-public-3
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: public
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.name
              - fromFieldPath: spec.vpc.subnet-public-3.name
            strategy: string
            string:
              fmt: "%s-%s"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.cidrBlock
          transforms:
            - type: string
              string:
                fmt: "%s.3.0/24"
        - fromFieldPath: spec.vpc.subnet-public-3.az
          toFieldPath: spec.forProvider.availabilityZone
        - fromFieldPath: spec.vpc.subnet-public-3.az
          toFieldPath: metadata.labels.zone

    # VPC :: Subnet
    - name: subnet-private-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: private
        spec:
          forProvider:
            mapPublicIpOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.name
              - fromFieldPath: spec.vpc.subnet-private-1.name
            strategy: string
            string:
              fmt: "%s-%s"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.cidrBlock
          transforms:
            - type: string
              string:
                fmt: "%s.101.0/24"
        - fromFieldPath: spec.vpc.subnet-private-1.az
          toFieldPath: spec.forProvider.availabilityZone
        - fromFieldPath: spec.vpc.subnet-private-1.az
          toFieldPath: metadata.labels.zone

    # VPC :: Subnet
    - name: subnet-private-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: private
        spec:
          forProvider:
            mapPublicIpOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.name
              - fromFieldPath: spec.vpc.subnet-private-2.name
            strategy: string
            string:
              fmt: "%s-%s"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.cidrBlock
          transforms:
            - type: string
              string:
                fmt: "%s.102.0/24"
        - fromFieldPath: spec.vpc.subnet-private-2.az
          toFieldPath: spec.forProvider.availabilityZone
        - fromFieldPath: spec.vpc.subnet-private-2.az
          toFieldPath: metadata.labels.zone

    # VPC :: Subnet
    - name: subnet-private-3
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            type: subnet
            visibility: private
        spec:
          forProvider:
            mapPublicIpOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.name
              - fromFieldPath: spec.vpc.subnet-private-3.name
            strategy: string
            string:
              fmt: "%s-%s"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.cidrBlock
          transforms:
            - type: string
              string:
                fmt: "%s.103.0/24"
        - fromFieldPath: spec.vpc.subnet-private-3.az
          toFieldPath: spec.forProvider.availabilityZone
        - fromFieldPath: spec.vpc.subnet-private-3.az
          toFieldPath: metadata.labels.zone

    # VPC :: ElasticIP
    - name: elastic-ip
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Address
        metadata:
          labels:
            type: eip
        spec:
          forProvider:
            domain: vpc
      patches:
        - type: PatchSet
          patchSetName: common

    # VPC :: Nate Gateway
    - name: natgateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: NATGateway
        metadata:
          labels:
            type: natgw
        spec:
          forProvider:
            allocationIdSelector:
              matchControllerRef: true
              matchLabels:
                type: eip
            vpcIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                type: subnet
                visibility: public
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "natgw-%s"
        - fromFieldPath: spec.vpc.subnet-public-1.az
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone

    # VPC :: Append route to private manager routetable
    - name: route-manager-private
      base:
        apiVersion: ec2.aws.crossplane.io/v1alpha1
        kind: Route
        spec:
          forProvider:
            ignoreRoutes: true
            vpcPeeringConnectionIdSelector:
              matchControllerRef: true
            routeTableIdSelector:
              matchLabels:
                ref.crossplane.io/manager-private-routetable: "true"
      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.vpc.cidrClassB
          toFieldPath: spec.forProvider.destinationCIDRBlock
          transforms:
            - type: string
              string:
                fmt: "%s.0.0/16"

    # VPC :: RouteTable
    - name: routetable-public
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
                gatewayIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: igw
            associations:
              - subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: subnet
                    visibility: public
              - subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: subnet
                    visibility: public
              - subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: subnet
                    visibility: public
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-pub-routetable"
        - fromFieldPath: spec.vpc.subnet-public-1.az
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.zone
        - fromFieldPath: spec.vpc.subnet-public-2.az
          toFieldPath: spec.forProvider.associations[1].subnetIdSelector.matchLabels.zone
        - fromFieldPath: spec.vpc.subnet-public-3.az
          toFieldPath: spec.forProvider.associations[2].subnetIdSelector.matchLabels.zone

    # VPC :: RouteTable
    - name: routetable-private
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
                natGatewayIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: natgw
              - destinationCidrBlock: 10.0.0.0/16
            associations:
              - subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: subnet
                    visibility: private
              - subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: subnet
                    visibility: private
              - subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: subnet
                    visibility: private
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-private-routetable"
        - fromFieldPath: spec.vpc.subnet-private-1.az
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.zone
        - fromFieldPath: spec.vpc.subnet-private-2.az
          toFieldPath: spec.forProvider.associations[1].subnetIdSelector.matchLabels.zone
        - fromFieldPath: spec.vpc.subnet-private-3.az
          toFieldPath: spec.forProvider.associations[2].subnetIdSelector.matchLabels.zone
        - fromFieldPath: status.vpc.vpcPeeringID
          toFieldPath: spec.forProvider.routes[1].vpcPeeringConnectionId
          policy:
            fromFieldPath: Required

    # SG :: eks - rds
    - name: securityGroup
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: SecurityGroup
        metadata:
          labels:
            type: rds-connection
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            description: Allow access to mysql instance
            ingress:
              - fromPort: 3306
                toPort: 3306
                ipProtocol: tcp
                ipRanges:
                  - cidrIp: 0.0.0.0/0
                    description: Everywhere
      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.groupName
          transforms:
            - type: string
              string:
                fmt: "org-%s-allow-rds"
    #------------------------
    # EKS
    #------------------------
    # - 1 IAM Role for cluster
    # - 1 IAM Role for developer (read only)
    # - 1 EKS cluster
    # - 1 Nodegroup
    #------------------------

    # EKS :: Cluster
    - name: eks-cluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            resourcesVpcConfig:
              endpointPrivateAccess: false
              endpointPublicAccess: true
              subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  type: subnet
          writeConnectionSecretToRef:
            namespace: crossplane-system
      patches:
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.eks.oidc
          transforms:
            - type: string
              string:
                type: TrimPrefix
                trim: 'https://'
          policy:
            fromFieldPath: Optional
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "gigapress-%s"
        # DYNAMIC
        - fromFieldPath: spec.eks.k8s-version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.name
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "cluster-%s"
        - fromFieldPath: spec.eks.cluster-role
          toFieldPath: spec.forProvider.roleArn
      connectionDetails:
        - name: clusterCA
          fromConnectionSecretKey: clusterCA
        - name: kubeconfig
          fromConnectionSecretKey: kubeconfig
        - name: endpointEKS
          fromConnectionSecretKey: endpoint

    # EKS :: Node Group
    - name: eks-nodegroup
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            amiType: AL2_x86_64
            instanceTypes:
              - m5.large
            scalingConfig:
              minSize: 3
            subnetSelector:
              matchControllerRef: true
              matchLabels:
                type: subnet
                visibility: private
            clusterNameSelector:
              matchControllerRef: true
      patches:
        # GROUPING
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: spec.name
          toFieldPath: "metadata.name"
          transforms:
            - type: string
              string:
                fmt: "ng-%s"
        # DYNAMIC
        - fromFieldPath: spec.eks.workers-size
          toFieldPath: spec.forProvider.scalingConfig.desiredSize
        - fromFieldPath: spec.eks.workers-size
          toFieldPath: spec.forProvider.scalingConfig.maxSize
        - fromFieldPath: spec.eks.workernode-role
          toFieldPath: spec.forProvider.nodeRole
        - fromFieldPath: spec.eks.workernode-type
          toFieldPath: spec.forProvider.instanceTypes[0]

    #---------------------------
    # EKS OIDC
    # S3
    # S3_ROLE
    # ALB_ROLE & ALB RELEASE
    #---------------------------

    # IAM OIDC :: EKS
    - name: eks-oidc
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: OpenIDConnectProvider
        spec:
          forProvider:
            clientIDList:
              - sts.amazonaws.com
            thumbprintList:
              - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
      patches:
        - fromFieldPath: spec.name
          toFieldPath: "metadata.name"
          transforms:
            - type: string
              string:
                fmt: "oidc-eks-%s"
        - fromFieldPath: status.eks.oidc
          toFieldPath: spec.forProvider.url
          transforms:
            - type: string
              string:
                fmt: "https://%s"
          policy:
            fromFieldPath: Required

    # S3 :: Bucket
    - name: s3-bucket
      base:
        apiVersion: s3.aws.crossplane.io/v1beta1
        kind: Bucket
        metadata:
          labels:
            type: org
        spec:
          forProvider:
            acl: private
            objectLockEnabledForBucket: false
      patches:
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.locationConstraint
        - fromFieldPath: spec.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "realm-%s.catex.se"
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.s3.arn

    # S3 :: Bucket Policy for catex-templates
    - name: s3-catex-template-bucket-policy
      base:
        apiVersion: s3.aws.crossplane.io/v1alpha3
        kind: BucketPolicy
        spec:
          forProvider:
            bucketName: catex-templates
            policy:
              version: '2012-10-17'
              statements:
                - action:
                    - s3:ListBucket
                  effect: Allow
                  principal:
                    awsPrincipals:
                      - iamRoleArnSelector:
                          matchControllerRef: true
                          matchLabels:
                            ability: s3
                  resource:
                    - "arn:aws:s3:::catex-templates"
                - action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:GetObjectAcl
                    - s3:DeleteObject
                  effect: Allow
                  principal:
                    awsPrincipals:
                      - iamRoleArnSelector:
                          matchControllerRef: true
                          matchLabels:
                            ability: s3
                  resource:
                    - "arn:aws:s3:::catex-templates/*"
                - action:
                    - s3:GetObject
                  effect: Allow
                  principal:
                    allowAnon: true
                  resource:
                    - "arn:aws:s3:::catex-templates/*"
      patches:
        - type: PatchSet
          patchSetName: common

    # S3 :: Bucket Policy
    - name: s3-bucket-policy
      base:
        apiVersion: s3.aws.crossplane.io/v1alpha3
        kind: BucketPolicy
        spec:
          forProvider:
            bucketNameSelector:
              matchControllerRef: true
              matchLabels:
                type: org
            policy:
              version: '2012-10-17'
              statements:
                - action:
                    - s3:ListBucket
                  effect: Allow
                  principal:
                    awsPrincipals:
                      - iamRoleArnSelector:
                          matchControllerRef: true
                          matchLabels:
                            ability: s3
                - action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:GetObjectAcl
                    - s3:DeleteObject
                  effect: Allow
                  principal:
                    awsPrincipals:
                      - iamRoleArnSelector:
                          matchControllerRef: true
                          matchLabels:
                            ability: s3
                - action:
                    - s3:GetObject
                  effect: Allow
                  principal:
                    allowAnon: true
      patches:
        - type: PatchSet
          patchSetName: common
        - fromFieldPath: status.s3.arn
          toFieldPath: spec.forProvider.policy.statements[0].resource[0]
          policy:
            fromFieldPath: Required
        - fromFieldPath: status.s3.arn
          toFieldPath: spec.forProvider.policy.statements[1].resource[0]
          transforms:
            - type: string
              string:
                fmt: '%s/*'
          policy:
            fromFieldPath: Required
        - fromFieldPath: status.s3.arn
          toFieldPath: spec.forProvider.policy.statements[2].resource[0]
          transforms:
            - type: string
              string:
                fmt: '%s/*'
          policy:
            fromFieldPath: Required

    # IAM :: Role
    - name: role-s3
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            ability: s3
      patches:
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "org-%s-s3"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: status.s3.ownerId
              - fromFieldPath: status.eks.oidc
            strategy: string
            string:
              fmt: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                      },
                      "Action": "sts:AssumeRoleWithWebIdentity",
                      "Condition": {}
                    }
                  ]
                }
          toFieldPath: spec.forProvider.assumeRolePolicyDocument
          policy:
            fromFieldPath: Required

    # IAM :: Role - Attachment
    - name: role-attach-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::221168245729:policy/CodeArtifactReadonly
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                ability: s3

    # IAM :: Role
    - name: role-ledger
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            ability: ledger
      patches:
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "org-%s-ledger"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: status.s3.ownerId
              - fromFieldPath: status.eks.oidc
            strategy: string
            string:
              fmt: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                      },
                      "Action": "sts:AssumeRoleWithWebIdentity",
                      "Condition": {}
                    }
                  ]
                }
          toFieldPath: spec.forProvider.assumeRolePolicyDocument
          policy:
            fromFieldPath: Required

    # IAM :: Role - Attachment
    - name: role-attach-policy-ledger
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::221168245729:policy/LedgerFullAccess
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                ability: ledger

    # Helm :: Config
    - name: helm-provider-config
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
              namespace: crossplane-system
      patches:
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.name
          toFieldPath: metadata.name
        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.credentials.secretRef.namespace
        - fromFieldPath: spec.name
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "cluster-%s"
          policy:
            fromFieldPath: Required
      readinessChecks:
        - type: None

    # Release :: Install bitnami/dns-external
    - name: release-dns-external
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: external-dns
              repository:  https://charts.bitnami.com/bitnami
            namespace: default
            skipCreateNamespace: true
            values:
              aws:
                zoneType: public
              domainFilters:
                - catex.se
      patches:
        - fromFieldPath: spec.name
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.values.aws.region

    # Helm :: ALB Ingress Controller Release
    - name: alb-ingress-controller
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: aws-load-balancer-controller
              repository: https://aws.github.io/eks-charts
            namespace: default
            skipCreateNamespace: true
            values:
              serviceAccount:
                create: true
                name: aws-alb-ingress-controller
      patches:
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.values.region
        - fromFieldPath: spec.name
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.name
          toFieldPath: spec.forProvider.values.clusterName
          transforms:
            - type: string
              string:
                fmt: "gigapress-%s"
          policy:
            fromFieldPath: Required
        - fromFieldPath: status.alb.arn
          toFieldPath: spec.forProvider.values.serviceAccount.annotations[eks.amazonaws.com/role-arn]
          policy:
            fromFieldPath: Required

    # IAM :: Role
    - name: role-alb
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            ability: alb
      patches:
        - fromFieldPath: spec.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "org-%s-alb"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: status.s3.ownerId
              - fromFieldPath: status.eks.oidc
              - fromFieldPath: status.eks.oidc
            strategy: string
            string:
              fmt: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                      },
                      "Action": "sts:AssumeRoleWithWebIdentity",
                      "Condition": {
                        "StringLike": {
                          "%s:sub": "system:serviceaccount:default:aws-alb-ingress-controller"
                        }
                      }
                    }
                  ]
                }
          toFieldPath: spec.forProvider.assumeRolePolicyDocument
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.arn
          toFieldPath: status.alb.arn
          policy:
            fromFieldPath: Optional
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.roleID
          toFieldPath: status.alb.roleID
          policy:
            fromFieldPath: Optional

    # IAM :: Role Policy Attachment
    - name: role-alb-policy-attachment
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::221168245729:policy/ALBManagement
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                ability: alb
